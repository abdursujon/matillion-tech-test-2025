package com.matillion.techtest2025.repository.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import static jakarta.persistence.CascadeType.ALL;
import static jakarta.persistence.FetchType.EAGER;
import static jakarta.persistence.GenerationType.IDENTITY;

/**
 * JPA entity representing a data analysis record in the {@code data_analysis} table.
 * <p>
 * Uses Lombok's {@code @Builder} for convenient object creation:
 * <pre>
 * DataAnalysisEntity entity = DataAnalysisEntity.builder()
 *     .originalData(csvData)
 *     .numberOfRows(10)
 *     .numberOfColumns(5)
 *     .totalCharacters(150)
 *     .createdAt(LocalDateTime.now())
 *     .build();
 * </pre>
 */
@Entity
@Table(name = "data_analysis")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DataAnalysisEntity {

    /**
     * Primary key, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = IDENTITY)
    private Long id;

    /**
     * Original CSV data. {@code @Lob} allows storing large text.
     */
    @Lob
    @Column(name = "original_data", nullable = false, columnDefinition = "TEXT")
    private String originalData;

    /**
     * Number of data rows in the CSV (excluding header).
     */
    @Column(name = "number_of_rows")
    private int numberOfRows;

    /**
     * Number of columns in the CSV.
     */
    @Column(name = "number_of_columns")
    private int numberOfColumns;

    /**
     * Total character count in the CSV.
     */
    @Column(name = "total_characters")
    private long totalCharacters;

    /**
     * Timestamp of when this analysis was created (immutable after creation).
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private OffsetDateTime createdAt;

    /**
     * One-to-many relationship with column statistics.
     * <p>
     * The {@code @OneToMany} annotation establishes the relationship, with {@code mappedBy}
     * indicating that the {@code dataAnalysis} field in {@link ColumnStatisticsEntity} owns the relationship.
     * <p>
     * {@code cascade = CascadeType.ALL} ensures that when this entity is saved/deleted,
     * all associated column statistics are also saved/deleted.
     * <p>
     * {@code orphanRemoval = true} ensures that if a column statistic is removed from this list,
     * it will be deleted from the database.
     */
    @OneToMany(mappedBy = "dataAnalysis", cascade = ALL, orphanRemoval = true, fetch = EAGER)
    @Builder.Default
    private List<ColumnStatisticsEntity> columnStatistics = new ArrayList<>();
}
