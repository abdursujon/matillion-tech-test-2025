package com.matillion.techtest2025.repository.entity;

import jakarta.persistence.*;
import lombok.*;

import static jakarta.persistence.FetchType.LAZY;
import static jakarta.persistence.GenerationType.IDENTITY;

/**
 * JPA entity representing statistics for a single column in a data analysis.
 * <p>
 * This entity has a many-to-one relationship with {@link DataAnalysisEntity},
 * allowing each analysis to have multiple column statistics records.
 * <p>
 * Uses Lombok's {@code @Builder} for convenient object creation:
 * <pre>
 * ColumnStatisticsEntity columnStats = ColumnStatisticsEntity.builder()
 *     .columnName("age")
 *     .nullCount(5)
 *     .dataAnalysis(parentEntity)
 *     .build();
 * </pre>
 */
@Entity
@Table(name = "column_statistics")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ColumnStatisticsEntity {

    /**
     * Primary key, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = IDENTITY)
    private Long id;

    /**
     * The name of the column (from CSV header).
     */
    @Column(name = "column_name", nullable = false)
    private String columnName;

    /**
     * The number of null/empty values in this column.
     */
    @Column(name = "null_count")
    private int nullCount;

    /**
     * The number of unique non-null values in this column.
     * <p>
     * <b>Note:</b> This field is required for Part 2 of the tech test.
     * Part 1 can be completed without implementing this functionality.
     */
    @Column(name = "unique_count")
    private int uniqueCount;

    /**
     * Inferred data type for this column based on non-null values.
     * Expected values: STRING, INTEGER, DECIMAL, BOOLEAN.
     */
    @Column(name = "data_type", length = 32, nullable = false)
    private String dataType;

    /**
     * Many-to-one relationship with the parent data analysis.
     * <p>
     * The {@code @ManyToOne} annotation establishes the foreign key relationship.
     * {@code @JoinColumn} specifies the foreign key column name in this table.
     */
    @ManyToOne(fetch = LAZY)
    @JoinColumn(name = "data_analysis_id")
    private DataAnalysisEntity dataAnalysis;
}
